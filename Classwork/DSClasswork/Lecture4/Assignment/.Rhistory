ggtitle('Heating Load analysis of Roof Area by Wall Area by Overall Height')
ggplot(energy.efficiency, aes(x = Heating.Load , y = Cooling.Load)) +
geom_point( aes(col = factor(Overall.Height), size= factor(Surface.Area)), alpha= 0.3) +
geom_density2d()+
xlab('Heating Load') +
ylab('Cooling Load') +
ggtitle('Heat and Cold Load Comparison by Overall Height')
ggplot(energy.efficiency, aes(x = Heating.Load , y = Cooling.Load, show.legend=F)) +
geom_point( aes(col = factor(Overall.Height), size= factor(Surface.Area)), alpha= 0.3) +
geom_density2d()+
xlab('Heating Load') +
ylab('Cooling Load') +
ggtitle('Heat and Cold Load Comparison by Overall Height')
ggplot(energy.efficiency, aes(x = Heating.Load , y = Cooling.Load)) +
geom_point( aes(col = factor(Overall.Height), size= factor(Surface.Area), show.legend=F), alpha= 0.3) +
geom_density2d()+
xlab('Heating Load') +
ylab('Cooling Load') +
ggtitle('Heat and Cold Load Comparison by Overall Height')
ggplot(energy.efficiency, aes(x = Heating.Load , y = Cooling.Load)) +
geom_point( aes(col = factor(Overall.Height), size= factor(Surface.Area)), alpha= 0.3) +
geom_density2d()+
xlab('Heating Load') +
ylab('Cooling Load') +
ggtitle('Heat and Cold Load Comparison by Overall Height')
ggplot(energy.efficiency, aes(x = Heating.Load , y = Cooling.Load)) +
geom_point( aes(col = factor(Overall.Height), size= factor(Surface.Area)), alpha= 0.3) +
guides(fill=FALSE)+
geom_density2d()+
xlab('Heating Load') +
ylab('Cooling Load') +
ggtitle('Heat and Cold Load Comparison by Overall Height')
ggplot(energy.efficiency, aes(x = Heating.Load , y = Cooling.Load)) +
geom_point( aes(col = factor(Overall.Height), size= factor(Surface.Area, fill=FALSE)), alpha= 0.3) +
geom_density2d()+
xlab('Heating Load') +
ylab('Cooling Load') +
ggtitle('Heat and Cold Load Comparison by Overall Height')
ggplot(energy.efficiency, aes(x = Heating.Load , y = Cooling.Load)) +
geom_point( aes(col = factor(Overall.Height), size= factor(Surface.Area), fill=F), alpha= 0.3) +
geom_density2d()+
xlab('Heating Load') +
ylab('Cooling Load') +
ggtitle('Heat and Cold Load Comparison by Overall Height')
ggplot(energy.efficiency, aes(x = Heating.Load , y = Cooling.Load)) +
geom_point( aes(col = factor(Overall.Height), size= factor(Surface.Area)), alpha= 0.3) +
guides(fill=FALSE)
ggplot(energy.efficiency, aes(x = Heating.Load , y = Cooling.Load)) +
geom_point( aes(col = factor(Overall.Height), size= factor(Surface.Area)), alpha= 0.3) +
guides(fill=FALSE)+
geom_density2d()+
xlab('Heating Load') +
ylab('Cooling Load') +
ggtitle('Heat and Cold Load Comparison by Overall Height')
ggplot(energy.efficiency, aes(x = Heating.Load , y = Cooling.Load)) +
geom_point( aes(col = factor(Overall.Height), size= factor(Surface.Area)), alpha= 0.3) +
geom_density2d()+
xlab('Heating Load') +
ylab('Cooling Load') +
ggtitle('Heat and Cold Load Comparison by Overall Height')
ggplot(energy.efficiency, aes(x = factor(Roof.Area), y = Heating.Load,  group = Surface.Area)) +
geom_boxplot(aes(fill = factor(Wall.Area))) +
# geom_jitter(alpha= 0.3)+
facet_grid(.~Overall.Height)+
xlab('Roof Area') +
ylab('Heating Load') +
ggtitle('Heating Load analysis of Roof Area by Wall Area by Overall Height')
p1 = ggplot( energy.efficiency, aes( Heating.Load, Surface.Area)) + stat_binhex(bins = 10)
p2 = ggplot( energy.efficiency, aes( Cooling.Load, Surface.Area)) + stat_binhex(bins = 10)
grid.arrange(p1, p2, nrow = 2)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load, col = Surface.Area))+
geom_point()+
facet_grid(Overall.Height ~ Roof.Area)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load, col = Overall.Height))+
geom_point()+
facet_grid(Overall.Height ~ Roof.Area)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load, col = factor(Overall.Height)))+
geom_point()+
facet_grid(Overall.Height ~ Roof.Area)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load, col = factor(Overall.Height)))+
geom_point(aes(group= Glazing.Area.Distribution))+
facet_grid(Overall.Height ~ Roof.Area)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load, col = factor(Overall.Height)))+
geom_point(aes(fill= Glazing.Area.Distribution))+
facet_grid(Overall.Height ~ Roof.Area)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load, col = factor(Overall.Height)))+
geom_point(aes(colour= Glazing.Area.Distribution))+
facet_grid(Overall.Height ~ Roof.Area)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load, col = factor(Overall.Height)))+
geom_point(aes(colour= Orientation))+
facet_grid(Overall.Height ~ Roof.Area)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load, col = Glazing.Area.Distribution))+
geom_point(aes(colour= Orientation))+
facet_grid(Overall.Height ~ Roof.Area)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load, fill = Glazing.Area.Distribution))+
geom_point(aes(colour= Orientation))+
facet_grid(Overall.Height ~ Roof.Area)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load, group = Glazing.Area.Distribution))+
geom_point(aes(colour= Orientation))+
facet_grid(Overall.Height ~ Roof.Area)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load))+
geom_point(aes(colour= Orientation))+
facet_grid(Overall.Height ~ Roof.Area)
ggplot(energy.efficiency, aes(Heating.Load, fill=Orientation))+geom_histogram()
with(energy.efficiency, table(Heating.Load, Cooling.Load))
head(with(energy.efficiency, table(Heating.Load, Cooling.Load)), n=1)
knitr::opts_chunk$set(echo = TRUE)
summary(energy.efficiency)
ggplot(energy.efficiency, aes(x = Heating.Load , y = Cooling.Load)) +
geom_point( aes(col = factor(Overall.Height), size= Surface.Area), alpha= 0.3) +
geom_density2d()+
xlab('Heating Load') +
ylab('Cooling Load') +
ggtitle('Heat and Cold Load Comparison by Overall Height')
ggplot(energy.efficiency, aes(x = factor(Roof.Area), y = Heating.Load,  group = Surface.Area)) +
geom_boxplot(aes(fill = factor(Wall.Area))) +
# geom_jitter(alpha= 0.3)+
facet_grid(.~Overall.Height)+
xlab('Roof Area') +
ylab('Heating Load') +
ggtitle('Heating Load analysis of Roof Area by Wall Area by Overall Height')
ggplot(energy.efficiency, aes(Wall.Area))+geom_bar()
ggplot(energy.efficiency, aes(Wall.Area))+geom_bar(fill=Roof.Area)
names(energy.efficiency)
ggplot(energy.efficiency, aes(Wall.Area))+geom_bar(aes(fill=Roof.Area))
ggplot(energy.efficiency, aes(Wall.Area))+geom_bar(aes(colour=Roof.Area))
ggplot(energy.efficiency, aes(Wall.Area))+geom_bar(aes(col=Roof.Area))
ggplot(energy.efficiency, aes(Wall.Area))+geom_bar(aes(fill=Roof.Area))
ggplot(energy.efficiency, aes(Wall.Area))+geom_bar(aes(group=Roof.Area))
ggplot(energy.efficiency, aes(Wall.Area, group=Roof.Area))+geom_bar()
ggplot(energy.efficiency, aes(Wall.Area, fill=Roof.Area))+geom_bar()
ggplot(energy.efficiency, aes(Wall.Area, colour=Roof.Area))+geom_bar()
ggplot(energy.efficiency, aes(Wall.Area, col=Roof.Area))+geom_bar()
ggplot(energy.efficiency, aes(Wall.Area))+geom_bar()
ggplot(energy.efficiency, aes(Wall.Area))+geom_bar(position = dodge)
ggplot(energy.efficiency, aes(Wall.Area))+geom_bar(position = "dodge")
ggplot(energy.efficiency, aes(Wall.Area))+geom_point()
ggplot(energy.efficiency, aes(x=Heating.Load, Wall.Area))+geom_point()
ggplot(energy.efficiency, aes(x=Heating.Load,group= Wall.Area))+geom_point()
ggplot(energy.efficiency, aes(x=Heating.Load, Cooling.Load,group= Wall.Area))+geom_point()
ggplot(energy.efficiency, aes(x=Heating.Load, Cooling.Load,group= Wall.Area, color=Wall.Area))+geom_point()
ggplot(energy.efficiency, aes(x=Heating.Load, Cooling.Load,group= Wall.Area, color=Orientation))+geom_point()
ggplot(energy.efficiency, aes(x=Heating.Load, Cooling.Load,group= Orientation, color=Orientation))+geom_point()
ggplot(energy.efficiency, aes(Wall.Area))+geom_bar(position = "stack")
ggplot(energy.efficiency, aes(Wall.Area))+geom_bar(stat = bin, position = "stack")
ggplot(energy.efficiency, aes(Wall.Area))+geom_bar(data= NULL, stat = bin, position = "stack")
ggplot(energy.efficiency, aes(Wall.Area))+geom_bar(data= energy.efficiency, stat = bin, position = "stack")
ggplot(energy.efficiency, aes(Wall.Area, fill=Wall.Area))+geom_bar()
ggplot(energy.efficiency, aes(Wall.Area, fill=Orientation))+geom_bar()
ggplot(energy.efficiency, aes(Cooling.Load))+geom_histogram()+
facet_grid(.~Orientation)
ggplot(energy.efficiency, aes(Cooling.Load))+geom_histogram()+
facet_grid(.~Orientation+Glazing.Area.Distribution)
ggplot(energy.efficiency, aes(Cooling.Load))+geom_histogram()+
facet_grid(.~Glazing.Area.Distribution)
ggplot(energy.efficiency, aes(Cooling.Load))+geom_histogram()+
facet_grid(Orientation~Glazing.Area.Distribution)
ggplot(energy.efficiency, aes(Cooling.Load))+geom_histogram()+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load))+geom_histogram()+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+geom_histogram()+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+geom_bar()+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+geom_area()+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+geom_boxplot()+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+geom_point()+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+geom_point(aes(col=Cooling.Load))+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+geom_point(aes(col=Cooling.Load~Heating.Load))+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+geom_point(aes(col=Overall.Height))+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+geom_point(aes(col=factor(Overall.Height)))+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load, shape= Cooling.Load))+geom_point(aes(col=factor(Overall.Height)))+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load, size= Cooling.Load))+geom_point(aes(col=factor(Overall.Height)))+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load, size= Cooling.Load))+geom_point(aes(col=factor(Overall.Height), size= Heating.Load))+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+geom_point(aes(col=factor(Overall.Height), size= Heating.Load))+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+geom_point(aes(col=factor(Overall.Height), size= Heating.Load+Cooling.Load))+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+geom_point(aes(col=factor(Overall.Height), size= Heating.Load~Cooling.Load))+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+geom_point(aes(col=factor(Overall.Height)))+
facet_grid(Orientation~factor(Glazing.Area))
p1 = ggplot( energy.efficiency, aes( Heating.Load, Surface.Area)) + stat_binhex(bins = 10)
p2 = ggplot( energy.efficiency, aes( Cooling.Load, Surface.Area)) + stat_binhex(bins = 10)
grid.arrange(p1, p2, nrow = 2)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load, col = Surface.Area))+
geom_point()+
facet_grid(Overall.Height ~ Roof.Area)
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+geom_point(aes(col=factor(Overall.Height)))+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+
geom_point(aes(col=factor(Overall.Height)))+
facet_grid(Orientation~factor(Glazing.Area))
```{r energyefficiency echo=FALSE}
p1 = ggplot( energy.efficiency, aes( Heating.Load, Surface.Area)) + stat_binhex(bins = 10)
p2 = ggplot( energy.efficiency, aes( Cooling.Load, Surface.Area)) + stat_binhex(bins = 10)
grid.arrange(p1, p2, nrow = 2)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load, col = Surface.Area))+
geom_point()+
facet_grid(Overall.Height ~ Roof.Area)
p1 = ggplot( energy.efficiency, aes( Heating.Load, Surface.Area)) + stat_binhex(bins = 10)
p2 = ggplot( energy.efficiency, aes( Cooling.Load, Surface.Area)) + stat_binhex(bins = 10)
grid.arrange(p1, p2, nrow = 2)
ggplot(energy.efficiency, aes(Heating.Load, fill=Orientation))+geom_histogram()
ggplot(energy.efficiency, aes(Cooling.Load, fill=Glazing.Area.Distribution))+geom_histogram()
ggplot(energy.efficiency, aes(Wall.Area, fill=Glazing.Area)) + ## Specify the data frame and columns. Note the + chain operator
geom_bar()
ggplot(energy.efficiency, aes(Heating.Load, fill=Orientation))+geom_histogram()
ggplot(energy.efficiency, aes(Wall.Area, fill=Glazing.Area)) + ## Specify the data frame and columns. Note the + chain operator
geom_bar()
ggplot(energy.efficiency, aes(Heating.Load, fill=Orientation))+geom_histogram()
names(energy.efficiency)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load))+
geom_point(aes(colour= Orientation))+
facet_grid(Overall.Height ~ Roof.Area)
ggplot(energy.efficiency, aes(Wall.Area, fill=Orientation))+geom_bar()
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+geom_point(aes(col=factor(Overall.Height)))+
facet_grid(Orientation~factor(Glazing.Area))
ggplot(energy.efficiency, aes(Heating.Load, fill=Orientation))+geom_histogram()
names(energy.efficiency)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load))+
geom_point(aes(colour= Orientation))+
facet_grid(Overall.Height ~ Roof.Area)
ggplot(energy.efficiency, aes(Heating.Load, fill=Orientation))+geom_histogram()
names(energy.efficiency)
ggplot(energy.efficiency, aes(Heating.Load, fill=Orientation))+geom_histogram()
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load))+
geom_point(aes(colour= Orientation))+
facet_grid(Overall.Height ~ Roof.Area)
library(MASS) # Contains the function 'fractions()',
breads = c('white', 'wheat', 'italian', 'sevengrain')
meats = c('ham', 'turkey', 'chicken', 'pastrami', 'meatballs')
toppings = c('mustard', 'mayo', 'salt_pepper', 'oil_vinegar')
cheese = c('swiss', 'american', 'chedar')
sandwiches = expand.grid(breads,
meats,
toppings)
nrow(sandwiches)
sandwiches
sandwiches2 = expand.grid(breads,
meats,
cheese,
toppings)
nrow(sandwiches2)
sandwiches2
twoDice = expand.grid(1:6,1:6)
twoDice
twoDice$sum = twoDice$Var1 + twoDice$Var2
twoDice$isdouble = twoDice$Var1 == twoDice$Var2 ## == is logical equals
twoDice
sumCounts = table(twoDice$sum)
sumCounts
doubles = sum(twoDice$isdouble)
doubles
fractions(doubles/nrow(twoDice))
sumProb = fractions(table(twoDice$sum)/nrow(twoDice)) # type ?fractions for detail
barplot(sumProb)
p1 = ggplot( energy.efficiency, aes( Heating.Load, Surface.Area)) + stat_binhex(bins = 10)
p2 = ggplot( energy.efficiency, aes( Cooling.Load, Surface.Area)) + stat_binhex(bins = 10)
grid.arrange(p1, p2, nrow = 2)
ggplot(energy.efficiency, aes(x = Cooling.Load, y = Heating.Load, col = Surface.Area))+
geom_point()+
facet_grid(Overall.Height ~ Roof.Area)
ggplot(energy.efficiency, aes(Heating.Load, Cooling.Load))+
geom_point(aes(col=factor(Overall.Height)))+
facet_grid(Orientation~factor(Glazing.Area))
head(auto.price)
rm(list = ls())
require(dplyr)
require(ggplot2)
setwd("C:\\Tejo\\Datascience\\UW_Datascience_course\\350\\MethodsofDataAnalysis_350\\DataScience350-master\\Lecture4\\Assignment")
read.auto = function(file = 'Automobile price data _Raw_.csv'){
## Read the csv file
auto.price <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
## Coerce some character columns to numeric
numcols <- c('price', 'bore', 'stroke', 'horsepower', 'peak.rpm')
auto.price[, numcols] <- lapply(auto.price[, numcols], as.numeric)
## Remove cases or rows with missing values. In this case we keep the
## rows which do not have nas.
auto.price[complete.cases(auto.price), ]
}
auto.price = read.auto()
names(auto.price)
head(auto.price)
View(auto.price)
table(auto.price$num.of.doors)
table(auto.price$body.style)
?complete.cases
auto.price$num.of.doors =="?"
rm(list = ls())
require(dplyr)
require(ggplot2)
setwd("C:\\Tejo\\Datascience\\UW_Datascience_course\\350\\MethodsofDataAnalysis_350\\DataScience350-master\\Lecture4\\Assignment")
read.auto = function(file = 'Automobile price data _Raw_.csv'){
## Read the csv file
auto.price <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
## Coerce some character columns to numeric
numcols <- c('price', 'bore', 'stroke', 'horsepower', 'peak.rpm')
auto.price[, numcols] <- lapply(auto.price[, numcols], as.numeric)
## Remove cases or rows with missing values. In this case we keep the
## rows which do not have nas.
auto.price[complete.cases(auto.price), ]
}
rm(list = ls())
require(dplyr)
require(ggplot2)
setwd("C:\\Tejo\\Datascience\\UW_Datascience_course\\350\\MethodsofDataAnalysis_350\\DataScience350-master\\Lecture4\\Assignment")
file = 'Automobile price data _Raw_.csv'
auto.price <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
View(auto.price)
table(auto.price$num.of.doors)
table(auto.price$price)
table(auto.price$price =="?")
rm(list = ls())
require(dplyr)
require(ggplot2)
setwd("C:\\Tejo\\Datascience\\UW_Datascience_course\\350\\MethodsofDataAnalysis_350\\DataScience350-master\\Lecture4\\Assignment")
read.auto = function(file = 'Automobile price data _Raw_.csv'){
## Read the csv file
auto.price <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
## Coerce some character columns to numeric
numcols <- c('price', 'bore', 'stroke', 'horsepower', 'peak.rpm')
auto.price[, numcols] <- lapply(auto.price[, numcols], as.numeric)
## Remove cases or rows with missing values. In this case we keep the
## rows which do not have nas.
auto.price[complete.cases(auto.price), ]
}
auto.price = read.auto()
table(auto.price$price =="?")
read.auto <- auto.price[(auto.price$drive.wheels != "4wd" || auto.price$num.of.doors != "?"),c("fuel.type",
"aspiration","drive.wheels" ,"price" ,
"num.of.doors", "body.style" )]
table(read.auto$num.of.doors)
auto.price$num.of.doors == "?"
auto.price[auto.price$num.of.doors == "?", ]
auto.price[auto.price$num.of.doors != "?", ]
read.auto <- read.auto[read.auto$num.of.doors != "?", ]
read.auto$log.price <- log(read.auto$price)
read.auto$scaled.log.price <- scale(read.auto$log.price, center = TRUE, scale = TRUE)
library(agricolae)
install.packages(agricolae)
install.packages("agricolae")
library(agricolae)
HSD.test(ajuste, 'chocolate$Tipo')
ajuste <- lm(auto.anova.sample$scaled.log.price ~ auto.anova.sample$num.of.doors+
auto.anova.sample$body.style)
rm(list = ls())
require(dplyr)
require(ggplot2)
setwd("C:\\Tejo\\Datascience\\UW_Datascience_course\\350\\MethodsofDataAnalysis_350\\DataScience350-master\\Lecture4\\Assignment")
read.auto <- auto.price[auto.price$drive.wheels != "4wd",c("fuel.type",
"aspiration","drive.wheels" ,"price" ,
"num.of.doors", "body.style" )]
read.auto <- read.auto[read.auto$num.of.doors != "?", ]
read.auto$log.price <- log(read.auto$price)
auto.price = read.auto()
read.auto = function(file = 'Automobile price data _Raw_.csv'){
## Read the csv file
auto.price <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
## Coerce some character columns to numeric
numcols <- c('price', 'bore', 'stroke', 'horsepower', 'peak.rpm')
auto.price[, numcols] <- lapply(auto.price[, numcols], as.numeric)
## Remove cases or rows with missing values. In this case we keep the
## rows which do not have nas.
auto.price[complete.cases(auto.price), ]
}
read.auto$scaled.log.price <- scale(read.auto$log.price, center = TRUE, scale = TRUE)
read.auto$scaled.price <- scale(read.auto$price, center = TRUE, scale = TRUE)
pop_auto.price = rnorm(nrow(read.auto), mean=mean(read.auto$scaled.price), sd = sd(read.auto$scaled.price))
pop_auto.norm = rnorm(nrow(read.auto), mean=0, sd = 1)
par(mfrow = c(1, 2))
plot(sort(pop_auto.price), sort(pop_auto.norm), main = 'Plot of Price vs. normalized',
xlab = 'Quantiles of norm1', ylab = 'Qunatiles of norm2')
abline(a = 0.0, b = 1.0, lty = 2, col = 'red')
plot(sort(pop_auto.log.price), sort(pop_auto.norm), main = 'Plot of log price vs. normalized',
xlab = 'Quantiles of norm1', ylab = 'Qunatiles of norm2')
pop_auto.log.price = rnorm(nrow(read.auto), mean=mean(read.auto$scaled.log.price), sd = sd(read.auto$scaled.log.price))
par(mfrow = c(1, 1))
ks.test(read.auto$scaled.log.price, pop_auto.norm)
ks.test(read.auto$scaled.price, pop_auto.norm)
ks.test(read.auto$scaled.price, read.auto$scaled.log.price)
x_seq = seq(-3,3,len=nrow(read.auto))
y_cdf1 = sapply(x_seq, function(x){
sum(read.auto$scaled.log.price<x)/length(read.auto$scaled.log.price)
})
y_cdf2 = sapply(x_seq, function(x){
sum(pop_auto.norm<x)/length(pop_auto.norm)
})
k_s_stat = max(abs(y_cdf1 - y_cdf2))
k_s_stat
k_index = which.max(abs(y_cdf1-y_cdf2))
k_s_x = x_seq[k_index]
plot(x_seq,y_cdf1, col='blue', pch=16, main ='CDFs of standardized samples',
xlab = 'Value', ylab = 'Cumulative density')
points(x_seq,y_cdf2,col='red', pch=16)
lines(c(k_s_x,k_s_x), c(y_cdf1[k_index],y_cdf2[k_index]),
col='black', lwd=8)
plot.t <- function(a, b, cols = c('pop_A', 'pop_B'), nbins = 20){
maxs = max(c(max(a), max(b)))
mins = min(c(min(a), min(b)))
breaks = seq(maxs, mins, length.out = (nbins + 1))
par(mfrow = c(2, 1))
hist(a, breaks = breaks, main = paste('Histogram of', cols[1]), xlab = cols[1])
abline(v = mean(a), lwd = 4, col = 'red')
hist(b, breaks = breaks, main = paste('Histogram of', cols[2]), xlab = cols[2])
abline(v = mean(b), lwd = 4, col = 'red')
par(mfrow = c(1, 1))
}
n = 10
auto.fuel.type = read.auto %>% group_by(fuel.type ) %>%
sample_n(n, replace = FALSE)
auto.fuel.type.bydiesel <-  auto.fuel.type[auto.fuel.type$fuel.type=="diesel",]
auto.fuel.type.bygas <-  auto.fuel.type[auto.fuel.type$fuel.type=="gas",]
pop_A = auto.fuel.type.bydiesel$scaled.log.price
pop_B = auto.fuel.type.bygas$scaled.log.price
plot.t(pop_A, pop_B, cols = c("Log price by Diesel", "Log price by Gas"))
ks.test(pop_A, pop_B, alternative = "two.sided")
auto.aspiration.type = read.auto %>% group_by(aspiration) %>%
sample_n(n, replace = FALSE)
auto.aspiration.type.std <-  auto.aspiration.type[auto.aspiration.type$aspiration=="std",]
auto.aspiration.type.turbo <-  auto.aspiration.type[auto.aspiration.type$aspiration=="turbo",]
pop_A = auto.aspiration.type.std$scaled.log.price
pop_B = auto.aspiration.type.turbo$scaled.log.price
plot.t(pop_A, pop_B)
ks.test(pop_A, pop_B, alternative = "two.sided")
auto.drive.wheels = read.auto %>% group_by(drive.wheels) %>%
sample_n(n, replace = FALSE)
auto.drive.wheels.rwd <-  auto.drive.wheels[auto.drive.wheels$drive.wheels=="rwd",]
auto.drive.wheels.fwd <-  auto.drive.wheels[auto.drive.wheels$drive.wheels=="fwd",]
pop_A = auto.drive.wheels.rwd$scaled.log.price
pop_B = auto.drive.wheels.fwd$scaled.log.price
ks.test(pop_A, pop_B, alternative = "two.sided")
plot.t(pop_A, pop_B)
ks.test(pop_A, pop_B, alternative = "two.sided")
auto.anova.sample = read.auto %>% group_by(num.of.doors, body.style) %>%
sample_n(n, replace = TRUE)
rm(list = ls())
require(dplyr)
require(ggplot2)
setwd("C:\\Tejo\\Datascience\\UW_Datascience_course\\350\\MethodsofDataAnalysis_350\\DataScience350-master\\Lecture4\\Assignment")
read.auto = function(file = 'Automobile price data _Raw_.csv'){
## Read the csv file
auto.price <- read.csv(file, header = TRUE,
stringsAsFactors = FALSE)
## Coerce some character columns to numeric
numcols <- c('price', 'bore', 'stroke', 'horsepower', 'peak.rpm')
auto.price[, numcols] <- lapply(auto.price[, numcols], as.numeric)
## Remove cases or rows with missing values. In this case we keep the
## rows which do not have nas.
auto.price[complete.cases(auto.price), ]
}
auto.price = read.auto()
read.auto <- auto.price[auto.price$drive.wheels != "4wd",c("fuel.type",
"aspiration","drive.wheels" ,"price" ,
"num.of.doors", "body.style" )]
read.auto <- read.auto[read.auto$num.of.doors != "?", ]
read.auto$log.price <- log(read.auto$price)
read.auto$scaled.log.price <- scale(read.auto$log.price, center = TRUE, scale = TRUE)
read.auto$scaled.price <- scale(read.auto$price, center = TRUE, scale = TRUE)
pop_auto.price = rnorm(nrow(read.auto), mean=mean(read.auto$scaled.price), sd = sd(read.auto$scaled.price))
pop_auto.norm = rnorm(nrow(read.auto), mean=0, sd = 1)
pop_auto.log.price = rnorm(nrow(read.auto), mean=mean(read.auto$scaled.log.price), sd = sd(read.auto$scaled.log.price))
par(mfrow = c(1, 2))
plot(sort(pop_auto.price), sort(pop_auto.norm), main = 'Plot of Price vs. normalized',
xlab = 'Quantiles of norm1', ylab = 'Qunatiles of norm2')
abline(a = 0.0, b = 1.0, lty = 2, col = 'red')
plot(sort(pop_auto.log.price), sort(pop_auto.norm), main = 'Plot of log price vs. normalized',
xlab = 'Quantiles of norm1', ylab = 'Qunatiles of norm2')
abline(a = 0.0, b = 1.0, lty = 2, col = 'red')
par(mfrow = c(1, 1))
auto.anova.sample = read.auto %>% group_by(num.of.doors, body.style) %>%
sample_n(n, replace = TRUE)
auto.anova.sample = read.auto %>% group_by(num.of.doors, body.style) %>%
sample_n(n, replace = TRUE)
View(read.auto)
read.auto %>% group_by(num.of.doors, body.style)
n=10
auto.anova.sample = read.auto %>% group_by(num.of.doors, body.style) %>%
sample_n(n, replace = TRUE)
boxplot(auto.anova.sample$scaled.log.price ~ auto.anova.sample$num.of.doors+
auto.anova.sample$body.style)
df_aov = aov(scaled.log.price ~ num.of.doors + body.style, data = auto.anova.sample)
summary(df_aov)
print(df_aov)
ajuste <- lm(auto.anova.sample$scaled.log.price ~ auto.anova.sample$num.of.doors+
auto.anova.sample$body.style)
summary(ajuste)
anova(ajuste)
HSD.test(ajuste, 'chocolate$Tipo')
HSD.test(ajuste, 'scaled.log.price')
HSD.test(ajuste, 'auto.anova.sample$scaled.log.price')
anova(ajuste)
print(df_aov)
anova(df_aov)
summary(df_aov)
print(df_aov)
